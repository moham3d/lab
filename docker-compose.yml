version: '3.8'

services:
  # Main FastAPI application
  app:
    build: .
    expose:
      - "8000"
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=patient_user
      - POSTGRES_PASSWORD=patient_password
      - POSTGRES_DB=patient_visits
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=patient_user
      - POSTGRES_PASSWORD=patient_password
      - POSTGRES_DB=patient_visits
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/database.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U patient_user -d patient_visits"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery_worker:
    build: .
    command: celery -A app.core.celery_app worker --loglevel=info
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=patient_user
      - POSTGRES_PASSWORD=patient_password
      - POSTGRES_DB=patient_visits
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@patient.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "5050:80"
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge