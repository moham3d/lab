SYSTEM OVERVIEW:
Healthcare backend API for archiving patient visits, managing nursing assessments (SH.MR.FRM.05), radiology assessments (SH.MR.FRM.04), and document storage.

USER ROLES:
- Nurses: Create patients, create visits, fill nursing assessments, upload documents
- Physicians: View open visits, complete radiology forms, update diagnoses
- Admins: Full system access, user management, generate reports

CORE WORKFLOWS:
1. Nurse searches/creates patient (SSN, mobile, medical number)
2. Nurse creates new visit and completes nursing assessment
3. Physician reviews open visits and completes radiology assessment
4. Document upload for scanned papers
5. Admin generates comprehensive reports

DATABASE SCHEMA:
Use PostgreSQL with SQLAlchemy ORM and Alembic migrations
Tables: patients, users, patient_visits, form_submissions, nursing_assessments, vital_signs, pain_assessment, fall_risk_assessment, radiology_assessments, visit_documents, audit_log

TECHNICAL STACK:
- Python 3.11+ with FastAPI
- PostgreSQL with asyncpg and SQLAlchemy 2.0
- JWT authentication with python-jose
- Pydantic models for validation and serialization
- Alembic for database migrations
- python-multipart for file uploads
- Comprehensive validation with Pydantic
- Automatic OpenAPI/Swagger documentation
- Pytest for testing
- Python-dotenv for environment management

KEY PYTHON PACKAGES:
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
asyncpg==0.29.0
alembic==1.12.1
pydantic==2.5.0
pydantic-settings==2.1.0
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
aiofiles==23.2.1
pytest==7.4.3
pytest-asyncio==0.21.1
python-dotenv==1.0.0
redis==5.0.1
celery==5.3.4

API ARCHITECTURE:
- Async/await pattern throughout
- Dependency injection for database sessions
- Pydantic models for request/response validation
- Automatic OpenAPI documentation
- Background tasks for heavy operations
- Redis for caching and session management
- Celery for async report generation

AUTHENTICATION & AUTHORIZATION:
- JWT tokens with refresh mechanism
- OAuth2 with Password Bearer tokens
- Role-based permissions using dependencies
- Secure password hashing with bcrypt
- Token blacklisting for logout

VALIDATION & SERIALIZATION:
- Pydantic models for all request/response data
- Custom validators for medical data (SSN, mobile numbers)
- Automatic data conversion and validation
- Comprehensive error responses

FILE HANDLING:
- Async file uploads with size limits
- MIME type validation
- Secure file storage with unique naming
- Background virus scanning (optional)

API ENDPOINTS STRUCTURE:
```python
# Authentication
POST /api/v1/auth/login
POST /api/v1/auth/refresh
POST /api/v1/auth/logout

# Patients
GET /api/v1/patients/search
POST /api/v1/patients
GET /api/v1/patients/{patient_ssn}
PUT /api/v1/patients/{patient_ssn}
GET /api/v1/patients/{patient_ssn}/history

# Visits
GET /api/v1/visits
POST /api/v1/visits
GET /api/v1/visits/{visit_id}
PUT /api/v1/visits/{visit_id}

# Forms
POST /api/v1/visits/{visit_id}/nursing-assessment
GET /api/v1/visits/{visit_id}/nursing-assessment
PUT /api/v1/visits/{visit_id}/nursing-assessment
POST /api/v1/visits/{visit_id}/radiology-assessment
GET /api/v1/visits/{visit_id}/radiology-assessment

# Documents
POST /api/v1/visits/{visit_id}/documents
GET /api/v1/visits/{visit_id}/documents
GET /api/v1/documents/{document_id}

# Reports (Admin only)
GET /api/v1/reports/dashboard
GET /api/v1/reports/patients/statistics
GET /api/v1/reports/visits/volume
GET /api/v1/reports/clinical/assessments
GET /api/v1/reports/export/{report_type}

# Admin
GET /api/v1/admin/users
POST /api/v1/admin/users
PUT /api/v1/admin/users/{user_id}

PROJECT STRUCTURE:
app/
├── main.py                 # FastAPI app initialization
├── config.py              # Settings and configuration
├── database.py            # Database connection and session
├── models/                # SQLAlchemy models
│   ├── __init__.py
│   ├── patient.py
│   ├── visit.py
│   ├── assessment.py
│   ├── user.py
│   └── document.py
├── schemas/               # Pydantic models
│   ├── __init__.py
│   ├── patient.py
│   ├── visit.py
│   ├── assessment.py
│   ├── user.py
│   └── auth.py
├── api/                   # API routes
│   ├── __init__.py
│   ├── deps.py           # Dependencies
│   └── v1/
│       ├── __init__.py
│       ├── auth.py
│       ├── patients.py
│       ├── visits.py
│       ├── assessments.py
│       ├── documents.py
│       ├── reports.py
│       └── admin.py
├── core/                  # Core functionality
│   ├── __init__.py
│   ├── security.py       # Authentication utilities
│   ├── permissions.py    # Authorization logic
│   └── exceptions.py     # Custom exceptions
├── services/             # Business logic
│   ├── __init__.py
│   ├── patient_service.py
│   ├── visit_service.py
│   ├── assessment_service.py
│   ├── document_service.py
│   └── report_service.py
├── utils/                # Utilities
│   ├── __init__.py
│   ├── validators.py     # Custom validators
│   ├── file_handler.py   # File operations
│   └── helpers.py        # Helper functions
├── tests/                # Test suite
│   ├── __init__.py
│   ├── conftest.py
│   ├── test_auth.py
│   ├── test_patients.py
│   └── test_visits.py
└── alembic/              # Database migrations
    ├── env.py
    └── versions/

PYDANTIC MODELS EXAMPLES:
# Patient models
class PatientCreate(BaseModel):
    ssn: str = Field(..., regex=r'^\d{14}$')
    mobile_number: str = Field(..., regex=r'^01[0-2]\d{8}$')
    phone_number: Optional[str] = None
    medical_number: Optional[str] = None
    full_name: str = Field(..., min_length=2, max_length=255)
    date_of_birth: Optional[date] = None
    gender: Optional[Literal['male', 'female', 'other']] = None

# Vital signs with medical validation
class VitalSigns(BaseModel):
    temperature_celsius: Optional[float] = Field(None, ge=30.0, le=45.0)
    pulse_bpm: Optional[int] = Field(None, ge=30, le=200)
    blood_pressure_systolic: Optional[int] = Field(None, ge=70, le=250)
    blood_pressure_diastolic: Optional[int] = Field(None, ge=40, le=150)
    respiratory_rate_per_min: Optional[int] = Field(None, ge=8, le=60)
    oxygen_saturation_percent: Optional[float] = Field(None, ge=70.0, le=100.0)

SECURITY FEATURES:

CORS configuration for healthcare environments
Rate limiting on authentication endpoints
Input sanitization and validation
SQL injection prevention with SQLAlchemy
XSS protection with proper content types
HIPAA-compliant audit logging
Secure file upload validation

PERFORMANCE FEATURES:

Async database operations
Connection pooling with asyncpg
Background tasks for heavy operations
Redis caching for frequently accessed data
Pagination for large datasets
Database query optimization

TESTING STRATEGY:

Unit tests with pytest
Integration tests for API endpoints
Database testing with test fixtures
Authentication testing
File upload testing
Performance testing for reports

DEPLOYMENT:

Docker containerization
Environment-based configuration
Health check endpoints
Logging configuration
Production WSGI server (Gunicorn + Uvicorn)

COMPLIANCE REQUIREMENTS:

HIPAA audit trails with all user actions
Data encryption at rest and in transit
Role-based access control enforcement
Secure session management
Data retention policies
Privacy controls for patient data


## **Key Python/FastAPI Specific Features:**

1. **Automatic Documentation** - FastAPI generates interactive Swagger UI
2. **Type Safety** - Pydantic models ensure type validation
3. **Async Performance** - Better concurrency for database operations
4. **Dependency Injection** - Clean authentication and authorization
5. **Background Tasks** - For heavy report generation
6. **Modern Python** - Leverages latest Python features

Use this specification with your `/specify` command, and it will generate a production-ready FastAPI healthcare backend!